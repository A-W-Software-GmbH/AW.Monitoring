services:
  grafana:
    image: ${DOCKER_REGISTRY-}grafana:${MONITORING_VERSION-latest}
    build:
      context: ./grafana
      dockerfile: ./Dockerfile
      tags:
        - ${DOCKER_REGISTRY-}grafana:latest
      args:
        - IMAGE_PATH=${NANOSERVER_IMAGE_PATH}
        - IMAGE_VERSION=${NANOSERVER_IMAGE_VERSION}
        - DOWNLOADER_IMAGE_PATH=${DOWNLOADER_IMAGE_PATH}
        - DOWNLOADER_IMAGE_VERSION=${DOWNLOADER_IMAGE_VERSION}
        - GRAFANA_VERSION=12.1.0
    ports:
      - "23000:3000"
    healthcheck:
      test:
        ["CMD-SHELL", "curl -k -f http://localhost:3000/api/health || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - prometheus
      - loki
      - tempo
    restart: unless-stopped
    command:
      - "--homepath=C:\\grafana"
      - "--config=C:\\grafana\\conf\\custom.ini"
    volumes:
      - ./grafana/provisioning:C:/grafana/provisioning:ro
      - grafana-data:C:/grafana/data:rw
      - grafana-logs:C:/grafana/logs:rw
    networks:
      - monitoring

  prometheus:
    image: ${DOCKER_REGISTRY-}prometheus:${MONITORING_VERSION-latest}
    build:
      context: ./prometheus
      dockerfile: ./Dockerfile
      tags:
        - ${DOCKER_REGISTRY-}prometheus:latest
      args:
        - IMAGE_PATH=${SERVERCORE_IMAGE_PATH}
        - IMAGE_VERSION=${SERVERCORE_IMAGE_VERSION}
        - DOWNLOADER_IMAGE_PATH=${DOWNLOADER_IMAGE_PATH}
        - DOWNLOADER_IMAGE_VERSION=${DOWNLOADER_IMAGE_VERSION}
        - PROMETHEUS_VERSION=3.4.2
    isolation: process
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -k -f http://localhost:9090/-/healthy || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./prometheus/config:C:/prometheus/config:ro
      - prometheus-data:C:/d:rw
    command:
      - "--storage.tsdb.path=C:\\d"
      - "--config.file=C:\\prometheus\\config\\prometheus.yaml"
      # - "--web.enable-otlp-receiver" # use this after migration to 3.0
      - "--log.level=debug"
      # - "--enable-feature=otlp-write-receiver"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=1GB"
      #- "--web.enable-remote-write-receiver"
    networks:
      - monitoring
    # ports:
    #   - "39090:9090" # Prometheus web UI

  loki:
    image: ${DOCKER_REGISTRY-}loki:${MONITORING_VERSION-latest}
    isolation: process
    restart: unless-stopped
    build:
      context: ./loki
      dockerfile: ./Dockerfile
      tags:
        - ${DOCKER_REGISTRY-}loki:latest
      args:
        - IMAGE_PATH=${NANOSERVER_IMAGE_PATH}
        - IMAGE_VERSION=${NANOSERVER_IMAGE_VERSION}
        - DOWNLOADER_IMAGE_PATH=${DOWNLOADER_IMAGE_PATH}
        - DOWNLOADER_IMAGE_VERSION=${DOWNLOADER_IMAGE_VERSION}
        - LOKI_VERSION=3.5.1
    volumes:
      - ./loki/config:C:/loki/config:ro
      - loki-storage:C:/d:rw
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f http://localhost:3100/ready || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    command:
      - "-config.file=C:\\loki\\config\\loki.yaml"
      - "-print-config-stderr"
    networks:
      - monitoring

  tempo:
    image: ${DOCKER_REGISTRY-}tempo:${MONITORING_VERSION-latest}
    restart: unless-stopped
    build:
      context: ./tempo
      dockerfile: ./Dockerfile
      tags:
        - ${DOCKER_REGISTRY-}tempo:latest
      args:
        - IMAGE_PATH=${NANOSERVER_IMAGE_PATH}
        - IMAGE_VERSION=${NANOSERVER_IMAGE_VERSION}
        - DOWNLOADER_IMAGE_PATH=${DOWNLOADER_IMAGE_PATH}
        - DOWNLOADER_IMAGE_VERSION=${DOWNLOADER_IMAGE_VERSION}
        - TEMPO_VERSION=2.8.1
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f http://localhost:3200/ready || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./tempo/config:C:/tempo/config:ro
      - tempo-storage:C:/tempo/traces:rw
    command: ["-config.file=C:\\tempo\\config\\tempo.yaml"]
    networks:
      - monitoring

  otel-collector:
    image: ${DOCKER_REGISTRY-}collector:${MONITORING_VERSION-latest}
    restart: unless-stopped
    build:
      context: ./otel-collector
      dockerfile: ./Dockerfile
      tags:
        - ${DOCKER_REGISTRY-}collector:latest
      args:
        - IMAGE_PATH=${NANOSERVER_IMAGE_PATH}
        - IMAGE_VERSION=${NANOSERVER_IMAGE_VERSION}
        - DOWNLOADER_IMAGE_PATH=${DOWNLOADER_IMAGE_PATH}
        - DOWNLOADER_IMAGE_VERSION=${DOWNLOADER_IMAGE_VERSION}
        - COLLECTOR_VERSION=0.130.1
    command: ["--config=C:\\collector\\config\\otel-colector.config.yaml"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k -f http://localhost:13133/health/status || exit 1",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./otel-collector/config:C:/collector/config:ro
    ports:
      - "34317:4317" # OTLP gRPC receiver
      - "34318:4318" # OTLP HTTP receiver
    networks:
      - monitoring

  # k6-tracing:
  #   image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
  #   environment:
  #     - ENDPOINT=otel-collector:4317
  #   restart: always
  #   depends_on:
  #     - otel-collector
  #   networks:
  #     - monitoring

volumes:
  prometheus-data:
    external: false
    labels:
      - aw-monitoring
  grafana-logs:
    external: false
    labels:
      - aw-monitoring
  grafana-data:
    external: false
    labels:
      - aw-monitoring
  loki-storage:
    external: false
    labels:
      - aw-monitoring
  tempo-storage:
    external: false
    labels:
      - aw-monitoring
networks:
  monitoring:
    name: nat
    external: true
    labels:
      - aw-monitoring
